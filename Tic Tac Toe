function Square(props) {
  return (
      <button className="square" 
              onClick={props.handleClick}>
        {props.value}
      </button>  
  )
}

/* 
class Square extends React.Component {
  render() {
    return (
      <button className="square" 
              onClick={() => this.props.handleClick()}>
        {this.props.value}
      </button>
    );
  }
}
*/ 

class Board extends React.Component {
    
  renderSquare(i) {
    return <Square 
                value={this.props.squares[i]}
                handleClick={() => this.props.handleClick(i)}
           />;
  }

  render() {
    // {console.log(this.state.squares)}
    return (
      <div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

class Game extends React.Component {
  constructor(props){
    super(props);
    this.state = {
      history: [{squares: Array(9).fill(null)}],
      stepNo: 0,
      xIsNext: true
    };
  }

  handleClick(i){
    const history = this.state.history.slice(0, this.state.stepNo + 1);
    const current = history[history.length-1];  
    var newSquares = current.squares.slice();
    if (calculateResult(newSquares) || newSquares[i]){
      return
    }
    newSquares[i] = this.state.xIsNext? 'x' : 'o';

    this.setState({
      history: history.concat([{squares: newSquares}]),
      xIsNext: !this.state.xIsNext,
      stepNo: history.length
    });
  }

  jumpTo(stepNo) {
    this.setState({
      stepNo: stepNo,
      xIsNext: stepNo % 2 === 0
    })
  }

  render() {
    const history = this.state.history;
    const current = history[this.state.stepNo];  
    var winner = calculateResult(current.squares);

    // Showing the past moves
    const moves = history.map((eachStep, moveIndex) => {
        const desc = moveIndex ? 
                     'Go to move #' + moveIndex :
                     'Go to game start';
        return (
          <li key={moveIndex}>
              <button onClick={() => jumpTo(moveIndex)}>{desc}</button>
          </li>
        );
    })

    var status;
    if (winner){
        status = 'Winner is ' + winner;
    } else {
        status = 'Next player: ' + (this.state.xIsNext? 'x' : 'o');
    }

    return (
      <div className="game">
        <div className="game-board">
          <Board 
            value = {current.squares}
            handleClick={(i) => this.handleClick(i)}
          />
        </div>
        <div className="game-info">
          <div>{status}</div>
          <ol>{moves}</ol>
        </div>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);

function calculateResult(arr) {
  const win = [
    [0,1,2],
    [3,4,5],
    [6,7,8],
    [0,3,6],
    [1,4,7],
    [2,5,8],
    [0,4,8],
    [2,4,6]
  ];
  
  for (var i=0; i<win.length; i++){
    const [a,b,c] = win[i];
    if (arr[a] && arr[a] == arr[b] && arr[a] == arr[c]){
      return arr[a]
    }
  }
  return null
}